services:
  # ==========================
  # API Gateway (Nginx)
  # ==========================
  api-gateway:
    build: ./api-gateway
    container_name: api_gateway
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - product-service
      - user-service
      - cart-service
      - review-service
      - order-service
    networks:
      - app_network

  # ==========================
  # Product Service (NestJS + mysql)
  # ==========================
  product-service:
    build:
      context: ./product-service
      dockerfile: dockerfile.dev
    container_name: product_service
    restart: always
    ports:
      - "3001:3001"
    environment:
      DATABASE_HOST: product-db
      DATABASE_PORT: 3306
      DATABASE_USER: root
      DATABASE_PASSWORD: APBjg7!RKa!P%t^NWd1y
      DATABASE_NAME: products
    volumes:
      - ./product-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - product-db
    networks:
      - app_network

  product-db:
    image: mysql:8
    container_name: mysql_product
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: APBjg7!RKa!P%t^NWd1y
      MYSQL_DATABASE: products
    volumes:
      - product_data:/var/lib/mysql
      - ./product-service/init:/docker-entrypoint-initdb.d
    networks:
      - app_network

  # ==========================
  # User Service (Express + mysql)
  # ==========================
  user-service:
    build:
      context: ./user-service
      dockerfile: dockerfile.dev
    container_name: user_service
    restart: always
    ports:
      - "3002:3002"
    environment:
      DATABASE_HOST: user-db
      DATABASE_PORT: 3306
      DATABASE_USER: root
      DATABASE_PASSWORD: Dp%mdSM^7MDr3qSQ6Cas
      DATABASE_NAME: users
      JWT_SECRET: "@y*&0a%K%7P0t@uQ^38HN$$y4Z^PK#0zE7dem700Bbf&pC6HF$$aU^ARkE@u$$nn"
    volumes:
      - ./user-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - user-db
    networks:
      - app_network

  user-db:
    image: mysql:8
    container_name: mysql_user
    restart: always
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: Dp%mdSM^7MDr3qSQ6Cas
      MYSQL_DATABASE: users
    volumes:
      - user_data:/var/lib/mysql
      - ./user-service/init:/docker-entrypoint-initdb.d
    networks:
      - app_network

  # ==========================
<<<<<<< HEAD
  # Cart Service (Express + MongoDB)
  # ==========================
  cart-service:
    build:
      context: ./cart-service
      dockerfile: dockerfile.dev
    container_name: cart_service
    restart: always
    ports:
      - "3006:3003"  # Cambiado de 3004 a 3006 para evitar conflicto con order-service
    environment:
      PORT: 3003   # Puerto donde corre Express
      MONGO_URI: mongodb://cart-db:27017/cartdb
    volumes:
      - ./cart-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - cart-db
    networks:
      - app_network

  cart-db:
    image: mongo:latest
    container_name: mongo_cart
    restart: always
    ports:
      - "3309:27017"
    environment:
      MONGO_INITDB_DATABASE: cartdb
    volumes:
      - cart_data:/data/db
=======
  # Orders Service (Express)
  # ==========================
  orders-service:
    build:
      context: ./orders-service
      dockerfile: dockerfile.dev
    container_name: orders_service
    restart: always
    ports:
      - "3004:3004"
    environment:
      DB_HOST: mysql_orders
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: orders_db
      PORT: 3004
      NODE_ENV: development
      JWT_SECRET: orders_jwt_secret_muy_seguro_2024
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000,http://localhost:8080
    volumes:
      - ./orders-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - orders-db
    networks:
      - app_network

  orders-db:
    image: mysql:8
    container_name: mysql_orders
    restart: always
    ports:
      - "3309:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: orders_db
    volumes:
      - orders_data:/var/lib/mysql
      - ./orders-service/init:/docker-entrypoint-initdb.d
>>>>>>> origin/main
    networks:
      - app_network

  # ==========================
<<<<<<< HEAD
  # Review Service (Express + MySQL)
  # ==========================
  review-service:
    build:
      context: ./review-service
      dockerfile: dockerfile.dev
    container_name: review_service
=======
  # Reviews Service (Express)
  # ==========================
  reviews-service:
    build:
      context: ./reviews-service
      dockerfile: dockerfile.dev
    container_name: reviews_service
>>>>>>> origin/main
    restart: always
    ports:
      - "3003:3003"
    environment:
<<<<<<< HEAD
      PORT: 3003
      DB_HOST: review-db
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: RvW#8mK$9nL@2pQ!
      DB_NAME: bytestore_reviews
      JWT_SECRET: "@y*&0a%K%7P0t@uQ^38HN$$y4Z^PK#0zE7dem700Bbf&pC6HF$$aU^ARkE@u$$nn"
      NODE_ENV: development
    volumes:
      - ./review-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - review-db
    networks:
      - app_network

  review-db:
    image: mysql:8
    container_name: mysql_review
=======
      DB_HOST: mysql_reviews
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: password
      DB_NAME: reviews_db
      PORT: 3003
      NODE_ENV: development
      JWT_SECRET: reviews_jwt_secret_muy_seguro_2024
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000,http://localhost:8080
    volumes:
      - ./reviews-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - reviews-db
    networks:
      - app_network

  reviews-db:
    image: mysql:8
    container_name: mysql_reviews
>>>>>>> origin/main
    restart: always
    ports:
      - "3310:3306"
    environment:
<<<<<<< HEAD
      MYSQL_ROOT_PASSWORD: RvW#8mK$9nL@2pQ!
      MYSQL_DATABASE: bytestore_reviews
    volumes:
      - review_data:/var/lib/mysql
      - ./review-service/init:/docker-entrypoint-initdb.d
    networks:
      - app_network

  # ==========================
  # Order Service (Express + MySQL)
  # ==========================
  order-service:
    build:
      context: ./order-service
      dockerfile: dockerfile.dev
    container_name: order_service
    restart: always
    ports:
      - "3004:3004"  # Cambiado de 3005 a 3004 para consistencia
    environment:
      PORT: 3004
      DB_HOST: order-db
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: OrD#5nK$7mL@9pQ!
      DB_NAME: bytestore_orders
      JWT_SECRET: "@y*&0a%K%7P0t@uQ^38HN$$y4Z^PK#0zE7dem700Bbf&pC6HF$$aU^ARkE@u$$nn"
      NODE_ENV: development
    volumes:
      - ./order-service/src:/usr/src/app/src
      - /usr/src/app/node_modules
    depends_on:
      - order-db
    networks:
      - app_network

  order-db:
    image: mysql:8
    container_name: mysql_order
    restart: always
    ports:
      - "3311:3306"
    environment:
      MYSQL_ROOT_PASSWORD: OrD#5nK$7mL@9pQ!
      MYSQL_DATABASE: bytestore_orders
    volumes:
      - order_data:/var/lib/mysql
      - ./order-service/init:/docker-entrypoint-initdb.d
=======
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: reviews_db
    volumes:
      - reviews_data:/var/lib/mysql
      - ./reviews-service/init:/docker-entrypoint-initdb.d
>>>>>>> origin/main
    networks:
      - app_network

# ==========================
# Volumenes
# ==========================
volumes:
  product_data:
  user_data:
<<<<<<< HEAD
  cart_data:
  review_data:
  order_data:
=======
  orders_data:
  reviews_data:
>>>>>>> origin/main
# ==========================
# Networks
# ==========================
networks:
  app_network:
    driver: bridge
